---
title: "Week 7: {{< var weeks.7.title >}}"
subtitle: "{{< var course.slides-subtitle >}}"
author: "{{< var course.author >}}"
institute: "{{< var course.institute >}}"
date: "October 9, 2024"
date-format: full
lecnum: 7
categories:
  - "Class Sessions"
bibliography: "../_PPOL6805.bib"
csl: "../chicago-17-no-url.csl"
# Shared across formats:
echo: true
code-fold: show
cache: false
html-math-method: mathjax
# Format-specific settings:
format:
  revealjs:
    output-file: "slides.html"
    df-print: kable
    slide-number: true
    scrollable: true
    tbl-cap-location: bottom
    link-external-icon: true
    link-external-newwindow: true
    footer: "{{< var weeks.7.footer >}}"
    include-in-header:
      text: "<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><link rel='stylesheet' type='text/css' href='https://cdn.jsdelivr.net/gh/dreampulse/computer-modern-web-font@master/fonts.css'><link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous'><script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js' integrity='sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz' crossorigin='anonymous'></script>"
    theme: [default, "../dsan-globals/jjquarto.scss"]
    revealjs-plugins:
      - simplemenu
    simplemenu:
      flat: true
      barhtml:
        header: "<div class='menubar'><span style='position: absolute; left: 8; padding-left: 8px;'><a href='./index.html'>&larr; Return to Notes</a></span><ul class='menu'></ul></div>"
      scale: 0.5
  html:
    output-file: "index.html"
    html-math-method: mathjax
    df-print: kable
---

::: {.content-visible unless-format="revealjs"}

<center class='mb-3'>
<a class="h2" href="./slides.html" target="_blank">Open slides in new tab &rarr;</a>
</center>

:::

# Random Fields {.crunch-title .crunch-ul .title-13 .crunch-math .not-title-slide .smaller data-stack-name="Random Fields"}

$$
\text{Data} = \left\{Z(\mathbf{s}) \mid \mathbf{s} \in D \subset \mathbb{R}^2\right\}
$$

![$D$ = Rectangle; $Z(\mathbf{s})$ here: **height** at coordinate $\mathbf{s} \in D$](images/w3.jpg){fig-align="center"}

## Key Notation / Definition {.smaller .smaller-table .crunch-title .crunch-ul .crunch-li-5 .crunch-math .shift-ul .inline-90 .math-90 .title-12}

::: {#full-defn style="width: 100% !important"}

2-Dimensional **Spatial Process** [@schabenberger_statistical_2004, 6]

$$
\text{Data} = \left\{Z(\mathbf{s}) \mid \mathbf{s} \in D \subset \mathbb{R}^d\right\}
$$

:::

```{=html}
<table>
<colgroup>
  <col style="width: 7%;">
  <col style="width: 30%;">
  <col style="width: 31%;">
  <col style="width: 32%;">
</colgroup>
<thead>
<tr>
    <th></th>
    <th>Geostatistical Data</th>
    <th>Lattice/Region Data</th>
    <th>Point Pattern</th>
</tr>
</thead>
<tbody>
<tr>
    <td><b>Criteria</b></td>
    <td><span data-qmd="Fixed $D$, Continuous"></span></td>
    <td><span data-qmd="Fixed $D$, Discrete"></span></td>
    <td><span data-qmd="Random subset $D^* \subseteq D$"></span></td>
</tr>
<tr>
  <td><b>What's Random?</td>
  <td><span data-qmd="Value of $Z$ at **`POINT`** $\mathbf{s}_i \in D$"></span></td>
  <td><span data-qmd="Value of $Z$ across **`POLYGON`** $\mathbf{r}_i \subseteq D$"></span></td>
  <td><span data-qmd="Subset $D^*$ formed by **events**"></span></td>
</tr>
<tr>
    <td><b>Interest</b></td>
    <td><span data-qmd="Infer **non-observed** parts of $D$"></span></td>
    <td><span data-qmd="**Autocorrelation**, clustering"></span></td>
    <td><span data-qmd="Point-generating **process**"></span></td>
    <td></td>
</tr>
<tr>
    <td><b>Example</b></td>
    <td class='tdvt'><div data-qmd="* Dumping sand on a table $D = \{(x,y) \mid x \in [0,2], y \in [0,1]\}$
* $Z(\mathbf{s}_i)$: Attribute(s) at site $\mathbf{s}_i$ (at coordinate $\mathbf{s}_i = (x_i,y_i)$)
* Example: **Height** of sand. $Z(\mathbf{s}_1) = 500\text{m}$, $Z(\mathbf{s}_2) = 850\text{m}$, $\ldots$"></div></td>
    <td class='tdvt'><div data-qmd="* $Z(\mathbf{s})$ observed over $N \times N$ grid of **plots**
    
* Well-defined 'Neighbors' (next section!)
* Autocorrelation: Are points **around** $\mathbf{s}_i$ likely to have values similar to $Z(\mathbf{s}_i)$?"></div></td>
    <td class='tdvt'><div data-qmd='* Unknown number of lightning strikes $\mathbf{s}_1, \mathbf{s}_2, \ldots$
* All of $D$ is observed, but what determines subset $D^*$ where **events** occur?
* *Unmarked*: Locations only
* *Marked*: Locations+info (e.g., intensity of strike)'></div></td>
</tr>
</tbody>
</table>
```

<!-- * Note the **lack of subscript** on $Z$! Important, not a typo! -->

## Geostatistical Data: Dumping Sand onto a Table! {.smaller .crunch-title .crunch-ul .crunch-quarto-figure .crunch-img .crunch-figcaption .crunch-quarto-layout-cell .crunch-quarto-layout-panel .title-10}

* Domain $D$: **tabletop**; Random process: **dumping sand** onto the tabletop
* $\Omega$: All possible realizations of process. $\omega_i \in \Omega$ Particular realization

::: {layout="[[1,1],[1,1]]"}

![$\omega_1 \in \Omega$](images/w1.jpg){#fig-w1 width="82%" fig-cap-location="top"}

![$\omega_2 \in \Omega$](images/w2.jpg){#fig-w2 width="82%" fig-cap-location="top"}

![$\omega_3 \in \Omega$](images/w3.jpg){#fig-w3 width="82%" fig-cap-location="top"}

![$\omega_4 \in \Omega$](images/w4.jpg){#fig-w4 width="82%" fig-cap-location="top"}

:::

## Example: Water Coverage in Bhola, Bangladesh {.smaller .crunch-img .title-10 .crunch-quarto-layout-panel .crunch-p}

:::: {layout="[75,25]" layout-valign="center"}
::: {#sea-level-rise}

![ArcGIS: [Sea Level Rise in Bangladesh](https://www.arcgis.com/apps/mapviewer/index.html?webmap=b82e4d7b92084b63a30b3a3bbed09ec5&utm_source=chatgpt.com)](images/bhola.jpg){fig-align="center"}

:::
::: {#tropic-of-chaos}

![@parenti_tropic_2011](images/tropic_of_chaos.jpg){fig-align="center"}

:::
::::

## Geostatistical *Modeling*: Terrains Are *Not* Spiky Chaotic Landscapes! {.smaller .crunch-title .title-12}

![](images/w2_missing.jpeg){fig-align="center"}

## Geostatistical Data $\rightarrow$ Point Pattern {.crunch-title .crunch-ul .smaller .crunch-quarto-layout-panel .crunch-img .crunch-quarto-figure .title-12 .text-65}

:::: {.columns}
::: {.column width="50%"}

* **Indicator function**: $\mathbb{1}\left[Z(\mathbf{s}) > 860\text{m}\right]$

```{r}
#| label: geostat-to-point
#| code-fold: true
#| fig-align: center
set.seed(6805)
library(tidyverse)
library(sf)
library(terra)
library(latex2exp)
#### Define area
lat_range <- c(-5.0, -6.0)
lon_range <- c(15, 20)
#lon_center <- -5.4
#lat_center <- 36.75
# And the window around this centroid
lat_radius <- 0.05
lon_radius <- 0.1

gen_random_table <- function(world_num=1, return_data=FALSE, rand_seed=NULL) {
  if (!is.null(rand_seed)) {
    set.seed(rand_seed)
  } else {
    rand_seed <- sample(1:9999, size=1)
    set.seed(rand_seed)
  }
  lat_center <- runif(1, min=min(lat_range), max=max(lat_range))
  lon_center <- runif(1, min=min(lon_range), max=max(lon_range))
  lon_lower <- lon_center - lon_radius
  lon_upper <- lon_center + lon_radius
  lat_lower <- lat_center - lat_radius
  lat_upper <- lat_center + lat_radius
  coords <- data.frame(x = c(lon_lower, lon_lower, lon_upper, lon_upper),
                       y = c(lat_lower, lat_upper, lat_lower, lat_upper))
  coords_sf <- st_as_sf(coords, coords = c("x", "y"), crs = 4326)
  # Using geodata
  elev <- geodata::elevation_3s(lon = lon_center, lat = lat_center, res=2.5, path = getwd())
  elev <- terra::crop(elev, coords_sf)
  return(elev)
}

compute_hillshade <- function(elev) {
  # Calculate hillshade
  slopes <- terra::terrain(elev, "slope", unit = "radians")
  aspect <- terra::terrain(elev, "aspect", unit = "radians")
  hs <- terra::shade(slopes, aspect)
  return(hs)
}

plot_hillshade <- function(elev, hs, title=NULL) {
  ## Plot hillshading as basemap
  # (here using terra::plot, but could use tmap)
  # lat_upper_trimmed <- lat_upper - 0.001*lat_upper
  # lat_lower_trimmed <- lat_lower - 0.001*lat_lower
  base_plot <- terra::plot(
    hs, col = gray(0:100 / 100), legend = FALSE, axes = FALSE, mar=c(0,0,1,0), grid=TRUE
  )
  #    xlim = c(elev_xmin, elev_xmax), ylim = c(elev_ymin, elev_ymax))
  # overlay with elevation
  
  color_vec <- terrain.colors(25)
  plot(elev, col = color_vec, alpha = 0.5, legend = FALSE, axes = FALSE, add = TRUE)
  
  # add contour lines
  terra::contour(elev, col = "grey30", add = TRUE)
  if (!is.null(title)) {
    world_name <- TeX(sprintf(r"(World $\omega_{%d} \in \Omega$)", world_num))
    title(world_name)
  }
}
elev_r1 <- gen_random_table(rand_seed=6810)
hs_r1 <- compute_hillshade(elev_r1)
plot_hillshade(elev_r1, hs_r1)
```

:::
::: {.column width="50%"}

```{r}
#| label: after-indicator
terra::ifel(
  elev_r1 > 860, elev_r1, NA
) |> plot()
```

:::
::::

:::: {.columns}
::: {.column width="50%"}

```{r}
#| label: before-indicator-r2
#| fig-align: center
#| code-fold: true
elev_r2 <- gen_random_table(rand_seed=6815)
hs_r2 <- compute_hillshade(elev_r2)
plot_hillshade(elev_r2, hs_r2)
```

:::
::: {.column width="50%"}

```{r}
#| label: after-indicator-r2
#| code-fold: true
my_quant <- function(x) quantile(x, 0.99)
elev_99 <- terra::global(elev_r2, my_quant)[1,1]
elev_indic_r2 <- terra::ifel(
  elev_r2 > elev_99, elev_r2, NA
)
plot(elev_indic_r2)
```

:::
::::

## Geospatial Data $\rightarrow$ Lattice/Region Data {.crunch-title .crunch-quarto-layout-cell .title-08}

:::: {.columns}
::: {.column width="50%"}

```{r}
#| label: table-to-lattice
#| code-fold: true
#| fig-align: center
#| fig-cap: "(Pretend this is infinite-resolution) Infinite number of neighbors around each point!"
table_elev <- gen_random_table(rand_seed=6805)
table_hs <- compute_hillshade(table_elev)
#plot_hillshade(table_elev, table_hs)
#par(mfrow=c(1,2), mar=c(0,0,1,1))
plot(table_elev)
```

:::
::: {.column width="50%"}

```{r}
#| label: coarsened
#| fig-align: center
#| code-fold: true
#| fig-cap: "Finite number of neighbors around each observation $\\implies$ Can study correlations between *neighboring* cells!"
elev_coarse <- terra::aggregate(table_elev, 12)
plot(elev_coarse)
```

:::
::::

# Doing Things with `nbdep` {data-stack-name="Autocorrelation"}

* "Neighbor" Definitions
* Testing Hypotheses About Neighborhoods!

## Who Are My Neighbors?

* Contiguity-Based:

  | | |
  |-|-|
  | ![](images/queen.png) | ![](images/rook.png) |

* Distance-Based
* $K$-Nearest Neighbors

## Distance-Based Neighbors

![From @xie_analyzing_2022](images/dist-based.jpeg){fig-align="center"}

## Spatial Autocorrelation

* Location $i$ has high value $\implies$ locations **near** $i$ more likely to have high values

![](images/autocorr.jpg){fig-align="center"}

## Moran's $I$

$$
I =
\underset{\text{Inverse of Variance}}{\boxed{\frac{n}{\sum_{i=1}^{n}(y_i - \overline{y})^2}}}
\frac
  {\overbrace{\sum_{i=1}^{n}\sum_{j=1}^{n}w_{ij}(y_i - \overline{y})(y_j - \overline{y})}^{\text{Weighted Covariance}}}
  {\underbrace{\sum_{i=1}^{n}\sum_{j=1}^{n}w_{ij}}_{\text{Normalize Weights}}}
$$

* $I$ is **Large** when:
    * $y_i$ and $y_j$ are **neighbors**: $w_{ij}$, and
    * $y_i$ and $y_j$ **large at the same time**: $(y_i - \overline{y})(y_j - \overline{y})$

## Local Indicators of Spatial Autocorrelation (LISA)

* tldr: See how much a given location $\mathbf{s}$ **contributes to** overall Moran's $I$
* Local Moran's $I$:

$$
I_i = \frac{y_i - \overline{y}}{S_i^2}\sum_{j=1}^{n}w_{ij}(y_j - \overline{y})
$$

# Our Null Hypothesis: Complete Spatial Randomness (CSR) {data-stack-name="Spatial Randomness"}

## Leaving You With a Challenge

* These point patterns can be **classified** as clustered or regular:

![](images/simple_clust.svg){fig-align="center" style="transform: rotate(90deg);"}

## A Challenge...

![](images/clusters.svg){fig-align="center"}

# Naïve Clustering {.smaller .smaller-table data-stack-name="Naïve Clustering"}

```{=html}
<table style="width: 100%;">
<colgroup>
  <col style="width: 15%;">
  <col style="width: 15%;">
  <col style="width: 5%;">
  <col style="width: 20%;">
  <col style="width: 5%;">
  <col style="width: 15%;">
  <col style="width: 5%;">
  <col style="width: 20%;">
</colgroup>
<thead>
</thead>
<tbody>
<tr>
    <td class='tdvc'><span data-qmd="**Weeks 6-8**<br>(My labels)"></span></td>
    <td class='tdvc'>Naïve Clustering</td>
    <td class='tdvc'>&rarr;</td>
    <td class='tdvc'><span data-qmd="Point Process **Models**"></span></td>
    <td class='tdvc'>&rarr;</td>
    <td class='tdvc'>Autocorrelation in Point Data</td>
    <td class='tdvc'>&rarr;</td>
    <td class='tdvc'>Autocorrelation in Lattice Data</td>
</tr>
<tr>
    <td class='tdvc'><span data-qmd="**@waller_applied_2004**"></span></td>
    <td class='tdvc'><span data-qmd="*(A bunch of stuff we already learned)*"></span></td>
    <td class='tdvc'>&rarr;</td>
    <td class='tdvc' style='border: 3px solid black;'>Ch 5: Analysis of Spatial Point Patterns</td>
    <td class='tdvc'>&rarr;</td>
    <td class='tdvc' style='border: 3px solid black;'>Ch 6: Point Data (Cases and Controls)</td>
    <td class='tdvc'>&rarr;</td>
    <td class='tdvc' style='border: 3px solid black;'><span data-qmd="Ch 7: Regional Count Data<br>*(First mention of autocorrelation on page 227)*"></span></td>
</tr>
<tr>
    <td class='tdvc'><span data-qmd="**@schabenberger_statistical_2004**"></span></td>
    <td class='tdvc' style='border: 3px solid black;'>Ch 1 (Page 14): Autocorrelation</td>
    <td class='tdvc'>&rarr;</td>
    <td class='tdvc' align='center' colspan="5"><span data-qmd="*(A bunch of more complicated stuff we'll learn later)*"></span></td>
</tr>
</tbody>
</table>
```

::: {.hidden}

```{r}
#| label: r-source-globals
source("../dsan-globals/_globals.r")
library(sf)
```

:::

## Why "Naïve"?

* [Continuing from last week] **Lattice data**: easiest way to visualize / operationalize simple measures of **clustering** via **spatial autocorrelation**
* So, we develop **intuitions** for measures like Moran's $I$ by looking at **lattice** data, but...
* Naïve because **we're not modeling the lattice regions (cells) themselves!**
* Non-naïve clustering: Knowing the **clusters** but also **what process led to their formation**!

## Spatial Randomness {.smaller .smaller-table .crunch-title .crunch-img}

```{r}
#| label: sr-plot
#| fig-align: center
#| code-fold: true
#| output: false
library(tidyverse)
library(spatstat)
set.seed(6805)
N <- 60
r_core <- 0.05
obs_window <- square(1)
# Regularity via Inhibition
#reg_sims <- rMaternI(N, r=r_core, win=obs_window)
cond_reg_sims <- rSSI(r=r_core, N)
# CSR data
#csr_sims <- rpoispp(N, win=obs_window)
cond_sr_sims <- rpoint(N, win=obs_window)
### Clustered data
#clust_sims <- rMatClust(kappa=6, r=2.5*r_core, mu=10, win=obs_window)
#clust_sims <- rMatClust(mu=5, kappa=1, scale=0.1, win=obs_window, n.cond=N, w.cond=obs_window)
#clust_sims <- rclusterBKBC(clusters="MatClust", kappa=10, mu=10, scale=0.05, verbose=FALSE)
# Each cluster consist of 10 points in a disc of radius 0.2
nclust <- function(x0, y0, radius, n) {
    #print(n)
    return(runifdisc(10, radius, centre=c(x0, y0)))
}
cond_clust_sims <- rNeymanScott(kappa=5, expand=0.0, rclust=nclust, radius=2*r_core, n=10)
# And PLOT
plot_w <- 400
plot_h <- 400
plot_scale <- 2.25
cond_reg_plot <- cond_reg_sims |> sf::st_as_sf() |>
  ggplot() +
  geom_sf() +
  dsan_theme()
ggsave("images/cond_reg.png", cond_reg_plot, width=plot_w, height=plot_h, units="px", scale=plot_scale)
cond_sr_plot <- cond_sr_sims |> sf::st_as_sf() |>
  ggplot() +
  geom_sf() +
  dsan_theme()
ggsave("images/cond_sr.png", cond_sr_plot, width=plot_w, height=plot_h, units="px", scale=plot_scale)
cond_clust_plot <- cond_clust_sims |> sf::st_as_sf() |>
  ggplot() +
  geom_sf() +
  dsan_theme()
ggsave("images/cond_clust.png", cond_clust_plot, width=plot_w, height=plot_h, units="px", scale=plot_scale)
```

```{=html}
<table style="width: 100%;">
<colgroup>
  <col style="width: 20%;">
  <col style="width: 25%;">
  <col style="width: 2%;">
  <col style="width: 25%;">
  <col style="width: 2%;">
  <col style="width: 25%;">
</colgroup>
<thead>
<tr>
    <th><span data-qmd="Autocorrelation"></span></th>
    <th align="center" class='tdvc'><span data-qmd="$I = -1$"></span></th>
    <th align="center" class='tdvc'>&larr;</th>
    <th align="center" class='tdvc'><span data-qmd="$I = 0$"></span></th>
    <th align="center" class='tdvc'>&rarr;</th>
    <th align="center" class='tdvc'><span data-qmd="$I = 1$"></span></th>
</tr>
</thead>
<tbody>
<tr>
    <td><span data-qmd="**Description**"></span></td>
    <td align="center"><span data-qmd="*Negative* Autocorr"></span></td>
    <td></td>
    <td align="center"><span data-qmd="*No* Autocorr"></span></td>
    <td></td>
    <td align="center"><span data-qmd="*Positive* Autocorr"></span></td>
</tr>
<tr>
    <td><span data-qmd="**Event at $\mathbf{s} = (x,y)$ Implies**"></span></td>
    <td align="center"><span data-qmd="*Less* likely to find another point nearby"></span></td>
    <td></td>
    <td align="center"><span data-qmd="No information about nearby points"></span></td>
    <td></td>
    <td align="center"><span data-qmd="*More* likely to find another point nearby"></span></td>
</tr>
<tr>
    <td><span data-qmd="**Resulting Pattern**"></span></td>
    <td align="center">Regularity</td>
    <td></td>
    <td align="center">Reg/Clustered Mix</td>
    <td></td>
    <td align="center">Clustering</td>
</tr>
<tr>
    <td><span data-qmd="**Process(es) Which Could Produce Pattern**"></span></td>
    <td align="left"><span data-qmd="**1st Order**: Random within even-spaced grid<br>**2nd Order**: Competition"></span></td>
    <td></td>
    <td align="center"><span data-qmd="**1st Order**: i.i.d. points<br>**2nd Order**: i.i.d. distances"></span></td>
    <td></td>
    <td align="center"><span data-qmd="**1st Order**: Tasty food at clust centers<br>**2nd Order**: Cooperation"></span></td>
</tr>
<tr>
    <td><span data-qmd="**Fixed $N$**"></span></td>
    <td align="center">60</td>
    <td></td>
    <td align="center">60</td>
    <td></td>
    <td align="center">60</td>
</tr>
<tr>
    <td></td>
    <td align="center"><img src="images/cond_reg.png" width="400px"></img></td>
    <td></td>
    <td align="center"><img src="images/cond_sr.png" width="400px"></img></td>
    <td></td>
    <td align="center"><img src="images/cond_clust.png" width="400px"></img></td>
</tr>
</tbody>
</table>
```

## *Complete* Spatial Randomness (CSR) {.smaller .smaller-table .crunch-title .crunch-img}

```{r}
#| label: csr-plot
#| fig-align: center
#| code-fold: true
#| output: false
library(tidyverse)
library(spatstat)
set.seed(6807)
lambda <- 60
r_core <- 0.05
obs_window <- square(1)
# Regularity via Inhibition
# Regularity via Inhibition
reg_sims <- rMaternI(lambda, r=r_core, win=obs_window)
# CSR data
csr_sims <- rpoispp(N, win=obs_window)
### Clustered data
clust_mu <- 10
clust_sims <- rMatClust(kappa=lambda / clust_mu, scale=2*r_core, mu=10, win=obs_window)
# And PLOT
plot_w <- 400
plot_h <- 400
plot_scale <- 2.25
reg_plot <- reg_sims |> sf::st_as_sf() |>
  ggplot() +
  geom_sf() +
  labs(title=paste0("N = ",reg_sims$n)) +
  dsan_theme()
ggsave("images/reg.png", reg_plot, width=plot_w, height=plot_h, units="px", scale=plot_scale)
csr_plot <- csr_sims |> sf::st_as_sf() |>
  ggplot() +
  geom_sf() +
  labs(title=paste0("N = ",csr_sims$n)) +
  dsan_theme()
ggsave("images/csr.png", csr_plot, width=plot_w, height=plot_h, units="px", scale=plot_scale)
clust_plot <- clust_sims |> sf::st_as_sf() |>
  ggplot() +
  geom_sf() +
  labs(title=paste0("N = ",clust_sims$n)) +
  dsan_theme()
ggsave("images/clust.png", clust_plot, width=plot_w, height=plot_h, units="px", scale=plot_scale)
```

```{=html}
<table style="width: 100%;">
<colgroup>
  <col style="width: 20%;">
  <col style="width: 25%;">
  <col style="width: 2%;">
  <col style="width: 25%;">
  <col style="width: 2%;">
  <col style="width: 25%;">
</colgroup>
<thead>
<tr>
    <th><span data-qmd="Autocorrelation"></span></th>
    <th align="center" class='tdvc'><span data-qmd="$I = -1$"></span></th>
    <th align="center" class='tdvc'>&larr;</th>
    <th align="center" class='tdvc'><span data-qmd="$I = 0$"></span></th>
    <th align="center" class='tdvc'>&rarr;</th>
    <th align="center" class='tdvc'><span data-qmd="$I = 1$"></span></th>
</tr>
</thead>
<tbody>
<tr>
    <td><span data-qmd="**Description**"></span></td>
    <td align="center"><span data-qmd="*Negative* Autocorr"></span></td>
    <td></td>
    <td align="center"><span data-qmd="*No* Autocorr"></span></td>
    <td></td>
    <td align="center"><span data-qmd="*Positive* Autocorr"></span></td>
</tr>
<tr>
    <td><span data-qmd="**Event at $\mathbf{s} = (x,y)$ Implies**"></span></td>
    <td align="center"><span data-qmd="*Less* likely to find another point nearby"></span></td>
    <td></td>
    <td align="center"><span data-qmd="No information about nearby points"></span></td>
    <td></td>
    <td align="center"><span data-qmd="*More* likely to find another point nearby"></span></td>
</tr>
<tr>
    <td><span data-qmd="**Resulting Pattern**"></span></td>
    <td align="center">Regularity</td>
    <td></td>
    <td align="center">Reg/Clustered Mix</td>
    <td></td>
    <td align="center">Clustering</td>
</tr>
<tr>
    <td><span data-qmd="**Process(es) Which Could Produce Pattern**"></span></td>
    <td align="left"><span data-qmd="**1st Order**: Random within even-spaced grid<br>**2nd Order**: Competition"></span></td>
    <td></td>
    <td align="center"><span data-qmd="**1st Order**: i.i.d. points<br>**2nd Order**: i.i.d. distances"></span></td>
    <td></td>
    <td align="center"><span data-qmd="**1st Order**: Tasty food at clust centers<br>**2nd Order**: Cooperation"></span></td>
</tr>
<tr>
    <td><span data-qmd="**Fixed Intensity $\lambda$**"></span></td>
    <td align="center">60</td>
    <td></td>
    <td align="center">60</td>
    <td></td>
    <td align="center">60</td>
</tr>
<tr>
    <td class='tdvt'><span data-qmd="**Random $N$**"></span></td>
    <td align="center"><img src="images/reg.png" width="400px"></img></td>
    <td></td>
    <td align="center"><img src="images/csr.png" width="400px"></img></td>
    <td></td>
    <td align="center"><img src="images/clust.png" width="400px"></img></td>
</tr>
</tbody>
</table>
```

## Measures are *Relative* to Window of Observation {.smaller .title-11}

* Same data can be **spatially random** within one window, **clustered** or **regular** in others!


```{r}
#| label: obs-windows
#| code-fold: true
#| output: false
N <- 60
obs_window <- square(1)
window_scale <- 3.5
csr_sims_square <- rpoispp(N, win=obs_window)
# Triangular window
obs_window_tri <- st_sfc(st_polygon(list(
    matrix(c(0.3,0.1,0.7,0.1,0.5,0.5,0.3,0.1), byrow=TRUE, nrow=4)
)))
obs_window_geom <- st_sfc(st_linestring(
    matrix(c(0,0,1,0,1,1,0,1,0,0), byrow=TRUE, nrow=5)
))
csr_sims_tri <- ppp(csr_sims_square$x, csr_sims_square$y, window=as.owin(obs_window_tri))
tri_plot <- csr_sims_tri |> sf::st_as_sf() |>
  ggplot() +
  geom_sf() +
  dsan_theme("quarter");
ggsave("images/window_tri.png", tri_plot, width=plot_w, height=plot_h, units="px", scale=window_scale)
# Square window
square_plot <- csr_sims_square |> sf::st_as_sf() |>
  ggplot() +
  geom_sf() +
  geom_sf(data=obs_window_tri |> sf::st_boundary()) +
  dsan_theme("quarter")
ggsave("images/window_square.png", square_plot, width=plot_w, height=plot_h, units="px", scale=window_scale)
# Circular window
obs_window_disc <- st_sfc(st_point(c(1, 0.5))) |> st_buffer(1.2)
csr_sims_circ <- ppp(csr_sims_square$x, csr_sims_square$y, window=as.owin(obs_window_disc))
circ_plot <- csr_sims_circ |> sf::st_as_sf() |>
  ggplot() +
  geom_sf() +
  geom_sf(data=obs_window_geom) +
  dsan_theme("quarter")
ggsave("images/window_circ.png", circ_plot, width=plot_w, height=plot_h, units="px", scale=window_scale)
```

| Regular | CSR | Clustered |
|:-:|:-:|:-:|
| ![](images/window_tri.png){fig-align="center"} | ![](images/window_square.png){fig-align="center"} | ![](images/window_circ.png){fig-align="center"} |


# Point Process Models {data-stack-name="Point Process Models"}

## Our New Library: `spatstat`! {.crunch-title}

:::: {.columns}
::: {.column width="50%"}

* Homepage: [spatstat.org](https://spatstat.org/){target='_blank'}
* GitHub: [github.com/spatstat](https://github.com/spatstat){target='_blank'}
* Book: @baddeley_spatial_2015 \[[Companion website](http://book.spatstat.org/){target='_blank'}\]
* PDF: [here](https://www.dropbox.com/scl/fi/egw826hopf6q53ll071n1/Baddeley-Adrian_-Rubak-Ege_-Turner-Rolf-Spatial-point-patterns.pdf?rlkey=y1n4smru4sj43sxzu4x54p5a9&dl=1)

:::
::: {.column width="50%"}

![](images/spatstat_book.jpg){fig-align="center" width="75%"}

:::
::::

## *Why* Do Events Appear Where They Do? {.smaller .title-12 .inline-90}

```{r}
#| label: intensity-est
#| code-fold: true
#| fig-width: 2
#| fig-height: 2
#| output: false
center_l_function <- function(x, ...) {

  if (!spatstat.geom::is.ppp(x) && !spatstat.geom::is.fv(x)) {
    stop("Please provide either ppp or fv object.")
  }

  if (spatstat.geom::is.ppp(x)) {
    x <- spatstat.explore::Lest(x, ...)
  }

  r <- x$r

  l_centered <- spatstat.explore::eval.fv(x - r)

  return(l_centered)
}
cond_clust_sf <- cond_clust_sims |> sf::st_as_sf()
pines_plot <- cond_clust_sf |>
  ggplot() +
  geom_sf() +
  dsan_theme("full")
ggsave("images/pines.png", pines_plot)
# density() calls density.ppp() if the argument is a ppp object
den <- density(cond_clust_sims, sigma = 0.1)
#summary(den)
png("images/intensity_plot.png")
plot(den, main = "Intensity λ(s)")
contour(den, add = TRUE) # contour plot
dev.off()
# And Kest / Lest
kest_result <- Kest(cond_clust_sims, rmax=0.5, correction="best")
lest_result <- center_l_function(cond_clust_sims, rmax=0.5)
png("images/lest.png")
plot(lest_result, main="K(h)")
dev.off()
```

| | First-Order | Second-Order |
|-|-|-|
| | Events considered **individually** $\implies$ **Intensity function $\lambda(\mathbf{s})$** | **Second-Order**: Events considered **pairwise** $\implies$ **$K$-function $K(\vec{h})$** |
| ![](images/pines.png) | ![](images/intensity_plot.png) | ![](images/lest.png) |



## References {.crunch-title .smaller}

::: {#refs}
:::


