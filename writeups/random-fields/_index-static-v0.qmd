---
title: "Topo v2 Scratch"
format:
  live-html:
    render-df: kable
---

{{< include ../../_extensions/r-wasm/live/_knitr.qmd >}}

```{r}
#| label: topo-init
#| autorun: true
set.seed(6805)
library(tidyverse) |> suppressPackageStartupMessages()
library(sf) |> suppressPackageStartupMessages()
library(terra) |> suppressPackageStartupMessages()
library(elevatr) |> suppressPackageStartupMessages()
library(latex2exp) |> suppressPackageStartupMessages()
```

```{r}
#### Define area
lat_range <- c(-5.0, -6.0)
lon_range <- c(15, 20)
# And the window around this centroid
lat_radius <- 0.05
lon_radius <- 0.1

get_elevation_data <- function(coords_sf, zoom_level=6) {
  assign("has_internet_via_proxy", TRUE, environment(curl::has_internet))
  elev_raster <- elevatr::get_elev_raster(
    coords_sf, z=zoom_level
  )
  # elev_crop <- terra::crop(elev_full, coords_sf)
  return(elev_raster)
}

gen_random_sf <- function(rand_seed=NULL) {
  rand_seed <- ifelse(
    is.null(rand_seed),
    sample(1:9999, size=1),
    rand_seed
  )
  set.seed(rand_seed)
  writeLines(paste0("RNG seed: ",rand_seed))
  lat_center <- runif(n=1, min=min(lat_range), max=max(lat_range))
  lon_center <- runif(n=1, min=min(lon_range), max=max(lon_range))
  lon_lower <- lon_center - lon_radius
  lon_upper <- lon_center + lon_radius
  lat_lower <- lat_center - lat_radius
  lat_upper <- lat_center + lat_radius
  coords_df <- tibble::tibble(
    x=lat_center, y=lon_center
  )
  coords_sf <- st_as_sf(
    coords_df, coords = c("x", "y"), crs = 4326
  )
  return(coords_sf)
}

compute_hillshade <- function(terrain_elev) {
  # Calculate hillshade
  slopes <- terra::terrain(terrain_elev, "slope", unit = "radians")
  aspect <- terra::terrain(terrain_elev, "aspect", unit = "radians")
  hillshade <- terra::shade(slopes, aspect)
  return(hillshade)
}

plot_hillshade <- function(terrain_raster, hillshade) {
  ## Plot hillshading as basemap
  base_plot <- terra::plot(
    hillshade, col = gray(0:100 / 100), legend = FALSE, axes = FALSE, mar=c(0,0,1,0), grid=TRUE
  )
  # overlay with elevation
  color_vec <- terrain.colors(25)
  plot(
    terrain_raster,
    col = color_vec, alpha = 0.5,
    legend = FALSE, axes = FALSE,
    add = TRUE
  )
  # add contour lines
  terra::contour(terrain_raster, col = "grey30", add = TRUE)
}
```

```{r}
# Uncomment and change the rand_seed argument for
# deterministic generation
# terrain_raster <- gen_random_table(rand_seed=6807)
terrain_sf <- gen_random_sf()
plot(terrain_sf)

terrain_elev <- get_elevation_data(terrain_sf)
plot(terrain_elev)

# terrain_hillshade <- compute_hillshade(terrain_raster)
# plot_hillshade(terrain_raster, terrain_hillshade)
```
