---
title: "Week 5: {{< var weeks.5.title >}}"
subtitle: "{{< var course.slides-subtitle >}}"
author: "{{< var course.author >}}"
institute: "{{< var course.institute >}}"
date: "September 25, 2024"
date-format: full
lecnum: 5
categories:
  - "Class Sessions"
bibliography: "../_PPOL6805.bib"
# Shared across formats:
echo: true
code-fold: show
css: "../dsan-globals/jjstyles.css"
html-math-method: mathjax
# Format-specific settings:
format:
  revealjs:
    output-file: "slides.html"
    df-print: kable
    slide-number: true
    scrollable: true
    tbl-cap-location: bottom
    link-external-icon: true
    link-external-newwindow: true
    footer: "{{< var weeks.5.footer >}}"
    include-in-header:
      text: "<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'>"
    theme: [default]
    revealjs-plugins:
      - simplemenu
    simplemenu:
      flat: true
      barhtml:
        header: "<div class='menubar'><span style='position: absolute; left: 8; padding-left: 8px;'><a href='./index.html'>&larr; Return to Notes</a></span><ul class='menu'></ul></div>"
      scale: 0.5
  html:
    output-file: "index.html"
    html-math-method: mathjax
    df-print: kable
---

::: {.content-visible unless-format="revealjs"}

<center class='mb-3'>
<a class="h2" href="./slides.html" target="_blank">Open slides in new tab &rarr;</a>
</center>

:::

# One More Unary Operation {data-stack-name="Buffers"}

::: {.hidden}

```{r}
#| label: source-globals
source("../dsan-globals/_globals.r")
set.seed(6805)
```

:::

## `st_buffer()`: An Unary Operation I Forgot to Introduce!

* Think about how you might answer questions like:
  * "How far is your house (`POINT`) from Manhattan (`POLYGON`)?"
  * "Are there any chemical plants within a mile of this building (`POLYGON`) / stretch of road (`LINESTRING`)?"
* Lazy mode (my favorite mode): Compute distances from the **centroid**
* GIS master mode: Construct the **buffer**!

## On `POLYGON`s {.smaller .crunch-title}

Key line: `manhattan_buffer_sf <- manhattan_union_sf |> st_buffer(dist = 1609.34)` (1 mile $\approx$ 1609.34 meters)

```{r}
#| label: manhattan-buffer
#| warning: false
#| code-fold: true
library(tidyverse)
library(sf)
library(tidycensus)
library(tigris)
library(mapview)
options(tigris_use_cache = TRUE)
manhattan_sf <- get_acs(
  geography = "tract",
  variables = "B19013_001",
  state = "NY",
  county = "New York",
  year = 2020,
  geometry = TRUE,
  cb = FALSE
)
# Erase the island tracts real quick
island_tracts <- c(
  "Census Tract 1, New York County, New York",
  "Census Tract 2.02, New York County, New York"
)
manhattan_sf <- manhattan_sf |> filter(
  !(NAME %in% island_tracts)
)
# Union of all census tracts within the county
manhattan_union_sf <- st_union(manhattan_sf)
manhattan_union_map <- mapview(manhattan_union_sf, label="New York County")
# Construct buffer (1 mile ~= 1609.34 meters)
manhattan_buffer_sf <- manhattan_union_sf |> st_buffer(dist = 1609.34)
manhattan_buffer_map <- mapview(manhattan_buffer_sf, label="Buffer (1 Mile)", col.regions = cbPalette[1], legend = TRUE)
manhattan_buffer_map + manhattan_union_map
```


## On `LINESTRING`s

```{r}
#| label: st-buffer-linestring
#| code-fold: true
#| fig-cap: "From the [`sf` Documentation](https://r-spatial.github.io/sf/reference/geos_unary.html){target='_blank'}"
library(tidyverse)
library(sf)
## st_buffer, style options (taken from rgeos gBuffer)
l1 = st_as_sfc("LINESTRING(0 0,1 5,4 5,5 2,8 2,9 4,4 6.5)")
op = par(mfrow=c(2,3))
plot(st_buffer(l1, dist = 1, endCapStyle="ROUND"), reset = FALSE, main = "endCapStyle: ROUND")
plot(l1,col='blue',add=TRUE)
plot(st_buffer(l1, dist = 1, endCapStyle="FLAT"), reset = FALSE, main = "endCapStyle: FLAT")
plot(l1,col='blue',add=TRUE)
plot(st_buffer(l1, dist = 1, endCapStyle="SQUARE"), reset = FALSE, main = "endCapStyle: SQUARE")
plot(l1,col='blue',add=TRUE)
plot(st_buffer(l1, dist = 1, nQuadSegs=1), reset = FALSE, main = "nQuadSegs: 1")
plot(l1,col='blue',add=TRUE)
plot(st_buffer(l1, dist = 1, nQuadSegs=2), reset = FALSE, main = "nQuadSegs: 2")
plot(l1,col='blue',add=TRUE)
plot(st_buffer(l1, dist = 1, nQuadSegs= 5), reset = FALSE, main = "nQuadSegs: 5")
plot(l1,col='blue',add=TRUE)
```

# From Unary to Binary Operations {data-stack-name="Getting Fancy"}

## What Makes Binary Operations "Fancier"? {.smaller .title-12 .crunch-title .crunch-ul}

::: {.columns}
::: {.column width="50%"}

<center>**Unary**</center>

* `st_centroid()`
  * `POLYGON` $\mapsto$ `POINT`
  * `MULTIPOLYGON` $\mapsto$ `POINT`
* `st_convex_hull()`
  * `POLYGON` $\mapsto$ `POLYGON`
  * `MULTIPOINT` $\mapsto$ `POLYGON`

:::
::: {.column width="50%"}

<center>**Binary**</center>

* `st_intersection()`
  * (`POINT`, `POINT`) $\mapsto$ `POINT | POINT EMPTY`
  * (`POLYGON`, `POLYGON`) $\mapsto$ `POLYGON | LINESTRING | POINT | POLYGON EMPTY`

:::
:::

* `st_is_empty()` and `st_dimension()` become your [new best friends](https://r-spatial.github.io/sf/reference/geos_query.html){target='_blank'} 😉
* `st_is_empty()`: Distinguishes between, e.g., `POINT EMPTY` and `POINT(0 0)`
* `st_dimension()`: `NA` for `empty` versions, otherwise
  * `2` for surfaces (`POLYGON`, `MULTIPOLYGON`)
  * `1` for lines (`LINESTRING`, `MULTILINESTRING`)
  * `0` for points (`POINT`, `MULTIPOINT`)

## The Bad Kind of Overthinking: Will My Life Just Get Harder and Harder? {.smaller .crunch-title .title-10 .crunch-img .crunch-quarto-layout-panel .crunch-quarto-figure .crunch-figure}

::: {layout="[1,1]" layout-valign="center" layout-align="center"}

![](images/bored_pooh.jpeg){fig-align="center" width="170"}

::: {#bored-pooh}

Unary Operations

:::
:::

::: {layout="[1,1]" layout-valign="center" layout-align="center"}

![](images/fancy_pooh.jpeg){fig-align="center" width="170"}

::: {#fancy-pooh}

Binary Operations

:::
:::

::: {layout="[1,1]" layout-valign="center" layout-align="center"}

![](images/fanciest_pooh.jpeg){fig-align="center" width="170"}

::: {#fanciest-pooh}

Ternary Operations

:::
:::

::: {layout="[1,1]" layout-valign="center" layout-align="center"}

![](images/infinite_pooh.jpeg){fig-align="center" width="170"}

::: {#fanciest-pooh}

Quaternary Operations

:::
:::

## Good News and Bad News {.smaller .crunch-title .crunch-ul}

* The good news: No!
* The bad news: You'll have to read the 465-page [Volume I](https://www.google.com/books/edition/Basic_Algebra/bOElBQAAQBAJ?hl=en&gbpv=0){target='_blank'} and then the 451-page [Volume II](https://www.google.com/books/edition/Further_Algebra_and_Applications/2Z_OC6uGzkwC?hl=en&sa=X&ved=2ahUKEwjCmMONmsyIAxWxKFkFHU7PGtAQiqUDegQIFBAH){target='_blank'} and then to page 15 of [Volume III](https://www.google.com/books/edition/Universal_Algebra/6tbuCAAAQBAJ?hl=en&gbpv=0){target='_blank'} of @cohn_universal_1965 to know why:

::: {.columns}
::: {.column width="50%"}

![](images/cohn_1.jpeg){fig-align="center"}

:::
::: {.column width="50%"}

![](images/cohn_2.jpeg){fig-align="center"}

::: {#rantyrant style="font-size: 10pt;"}

*(i spent 4 yrs of undergrad studying abstract algebra and now it all sits gathering dust somewhere deep within my brain plz just let me have this moment i'll never mention it again i promise)*

:::

:::
:::

## The Good Kind of Overthinking... {.crunch-title .crunch-ul}

* For fancier geospatial operations, we'll need to start **overthinking**, about the possible **relationships** between two (or more) geometries! $\leadsto$ Relational **Predicates**:

![[Figure 4.2](https://r.geocompx.org/spatial-operations.html) in @lovelace_geocomputation_2024](images/relations.png){fig-align="center"}

# Ad Hoc / Ambiguous $\rightarrow$ Precise: Enter DE-9IM! {data-stack-name="DE-9IM"}

## DE-9IM Strings {.smaller}

Each cell here visualizes one component of the DE-9IM string `1020F1102`, which describes the relationship between the following two geometries:

* **Boxey McBoxface**: `POLYGON(0 0, 1 0, 1 1, 0 1, 0 0)`
* **Liney McLineface**: `LINESTRING(0.5 -0.5, 0.5 0.5)`

```{r}
#| label: de-9im-strings
#| echo: true
#| code-fold: true
#| fig-align: center
#| fig-cap: "Code from @pebesma_spatial_2023"
library(sf)
polygon <- po <- st_polygon(list(rbind(c(0,0), c(1,0), c(1,1), c(0,1), c(0,0))))
p0 <- st_polygon(list(rbind(c(-1,-1), c(2,-1), c(2,2), c(-1,2), c(-1,-1))))
line <- li <- st_linestring(rbind(c(.5, -.5), c(.5, 0.5)))
s <- st_sfc(po, li)

par(mfrow = c(3,3))
par(mar = c(1,1,1,1))

# "1020F1102"
# 1: 1
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("I(pol)",intersect(),"I(line) = 1")))
lines(rbind(c(.5,0), c(.5,.495)), col = 'red', lwd = 2)
points(0.5, 0.5, pch = 1)

# 2: 0
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("I(pol)",intersect(),"B(line) = 0")))
points(0.5, 0.5, col = 'red', pch = 16)

# 3: 2
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("I(pol)",intersect(),"E(line) = 2")))
plot(po, col = '#ff8888', add = TRUE)
plot(s, col = c(NA, 'darkgreen'), border = 'blue', add = TRUE)

# 4: 0
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("B(pol)",intersect(),"I(line) = 0")))
points(.5, 0, col = 'red', pch = 16)

# 5: F
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("B(pol)",intersect(),"B(line) = F")))

# 6: 1
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("B(pol)",intersect(),"E(line) = 1")))
plot(po, border = 'red', col = NA, add = TRUE, lwd = 2)

# 7: 1
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("E(pol)",intersect(),"I(line) = 1")))
lines(rbind(c(.5, -.5), c(.5, 0)), col = 'red', lwd = 2)

# 8: 0
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("E(pol)",intersect(),"B(line) = 0")))
points(.5, -.5, col = 'red', pch = 16)

# 9: 2
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("E(pol)",intersect(),"E(line) = 2")))
plot(p0 / po, col = '#ff8888', add = TRUE)
plot(s, col = c(NA, 'darkgreen'), border = 'blue', add = TRUE)
```

## Slowing Down: 9IM *(no DE yet!)* {.smaller .crunch-title .crunch-img .table-va}

::: {#tbl-polys}

| 9IM | Interior | Boundary | Exterior |
|:-:|:-:|:-:|:-:|
| **Interior** | ![](images/matrix_x0_y0.png){.de9im fig-align="center"}<br>&nbsp; | ![](images/matrix_x0_dy.png){.de9im fig-align="center"}<br>&nbsp; | ![](images/matrix_x0_ny.png){.de9im fig-align="center"}<br>&nbsp; |
| **Boundary** | ![](images/matrix_dx_y0.png){.de9im fig-align="center"}<br>&nbsp; | ![](images/matrix_dx_dy.png){.de9im fig-align="center"}<br>&nbsp; | ![](images/matrix_dx_ny.png){.de9im fig-align="center"}<br>&nbsp; |
| **Exterior** | ![](images/matrix_nx_y0.png){.de9im fig-align="center"}<br>&nbsp; | ![](images/matrix_nx_dy.png){.de9im fig-align="center"}<br>&nbsp; | ![](images/matrix_nx_ny.png){.de9im fig-align="center"}<br>&nbsp; |

From [OSGeo Project](https://docs.geotools.org/latest/userguide/library/jts/dim9.html){target='_blank'}
:::

## *Dimensionally Extended* (DE) 9IM {.smaller .crunch-title .crunch-img .table-va}

::: {#tbl-de-polys}

| 9IM | Interior | Boundary | Exterior |
|:-:|:-:|:-:|:-:|
| **Interior** | ![](images/matrix_x0_y0.png){.de9im fig-align="center"}<br>2 | ![](images/matrix_x0_dy.png){.de9im fig-align="center"}<br>1 | ![](images/matrix_x0_ny.png){.de9im fig-align="center"}<br>2 |
| **Boundary** | ![](images/matrix_dx_y0.png){.de9im fig-align="center"}<br>1 | ![](images/matrix_dx_dy.png){.de9im fig-align="center"}<br>0 | ![](images/matrix_dx_ny.png){.de9im fig-align="center"}<br>1 |
| **Exterior** | ![](images/matrix_nx_y0.png){.de9im fig-align="center"}<br>2 | ![](images/matrix_nx_dy.png){.de9im fig-align="center"}<br>1 | ![](images/matrix_nx_ny.png){.de9im fig-align="center"}<br>2 |

From [OSGeo Project](https://docs.geotools.org/latest/userguide/library/jts/dim9.html){target='_blank'}
:::

## Crunching it Down into a Tiny Box

| DE-9IM | Interior | Boundary | Exterior |
|:-|:-:|:-:|:-:|
| **Interior** | 2 | 1 | 2 |
| **Boundary** | 1 | 0 | 1 |
| **Exterior** | 2 | 1 | 2 |

<h2>**And Then into a Tiny String**</h2>

<center style="margin-bottom: 10px;">
`212101212`
</center>

<h3>And Then into an Infinitesimally-Small Point</h3>

![](images/gangster_spongebob.jpg){.nostretch fig-align="center" width="15px"}

## DE-9IM *Masks* {.smaller .crunch-title .crunch-ul}

* Now terms can be given **unambiguous, precise meaning!**

| [`st_overlaps()`](https://r-spatial.github.io/sf/reference/geos_binary_pred.html){target='_blank'} | Interior | Boundary | Exterior |
|:-|:-:|:-:|:-:|
| **Interior** | `T` | `*` | `T` |
| **Boundary** | `*` | `*` | `*` |
| **Exterior** | `T` | `*` | `*` |

* Special Values (besides `0`, `1`, `2`):
  * `T`: "True" (non-empty, `st_dimension() >= 0`)
  * `F`: "False" (empty, `st_dimension() == NA`)
  * `*`: "Wildcard" (Don't care what the value is)
* `st_overlaps()`: `T*T***T**`, `st_equals()`: `T*F**FFF*`

## DE-9IM vs. Everyday Language {.smaller}

* DE-9IM can (in theory) represent $6^9 = 10~077~696$ possible geometric relationships!
* The English language has like 10, and they're ambiguous ☠️ *(Compromise employed by GIS systems: allow multiple masks for same English word:)*

| English | Mask | `212101212` | Result |
| - | - | - | - |
| "Disjoint" | `FF*FF****` | `FALSE` | `x` not disjoint from `y` |
| "Touches" | `FT*******` | `FALSE` | `x` doesn't touch `y` |
| "Touches" | `F***T****` | `FALSE` | `x` doesn't touch `y` |
| "Crosses" | `T*T***T**` | `TRUE` | `x` crosses `y` |
| "Within" | `TF*F*****` | `FALSE` | `x` is not within `y` |
| "Overlaps" | `T*T***T**` | `TRUE` | `x` overlaps `y` |

## `st_relate()`: The Ultimate Predicate {.smaller .crunch-title .title-12}

```{r}
#| label: st-relate
library(tidyverse)
library(rnaturalearth)
us <- ne_states(country="United States of America")
dc <- us |> filter(iso_3166_2 == "US-DC")
us <- us |>
  mutate(
    de9im = st_relate(us, dc),
    touch = st_touches(us, dc, sparse = F)
  ) |>
  select(iso_3166_2, name, de9im, touch) |>
  arrange(name)
us
```

## (If You Don't Want to Scroll) {.smaller}

```{r}
#| label: st-relate-filtered
us |> filter(touch)
```

# Doing Things with DE-9IM (Back to Binary Operations) {data-stack-name="Binary Operations"}

## From Last Week: *Almost* a Spatial Join {.smaller .crunch-title .leaflet-350}

```{r}
library(mapview)
library(leaflet.extras2)
africa_sf <- ne_countries(continent = "Africa", scale = 50) |> select(iso_a3, geounit)
africa_map <- mapview(africa_sf, label="geounit", legend=FALSE)
N <- 10
africa_union_sf <- sf::st_union(africa_sf)
sampled_points_sf <- sf::st_sample(africa_union_sf, N) |> sf::st_sf() |> mutate(temp = runif(N, 0, 100))
sampled_points_map <- mapview(sampled_points_sf, label="Random Point", col.regions=cbPalette[1], legend=FALSE)
countries_points_sf <- africa_sf[sampled_points_sf,]
filtered_map <- mapview(countries_points_sf, label="geounit", legend=FALSE) + sampled_points_map
(africa_map + sampled_points_map) | filtered_map
```

## Spatial Filter $\neq$ Spatial Join {.smaller .smaller-table}

* The issue: **Data attributes of `POINT`s are not merged into data attributes of `POLYGON`s**

::: {.columns}
::: {.column width="50%"}

<center>**`POINT` Attributes**</center>

```{r}
#| label: point-attributes
st_geometry(sampled_points_sf) <- c("geom")
sampled_points_sf |> head()
```

:::
::: {.column width="50%"}

<center>**`POLYGON` Attributes**</center>

```{r}
#| label: poly-attributes
countries_points_sf |> head(4)
```

:::
:::

## Our First Real Spatial Join: `st_join()` {.smaller .crunch-title .title-12}

```{r}
#| label: st-join
joined_sf <- countries_points_sf |> st_join(sampled_points_sf)
joined_sf |> head()
```

![](images/dance_with_doge.gif){fig-align="center"}

## But... We Were Still in Easy Mode {.crunch-title}

* Every point could be matched **one-to-one** with a country. But what if... 😱

```{r}
#| label: area-weighted-interpolation
#| code-fold: true
g <- st_make_grid(st_bbox(st_as_sfc("LINESTRING(0 0,1 1)")), n = c(2,2))
par(mar = rep(0,4))
plot(g)
plot(g[1] * diag(c(3/4, 1)) + c(0.25, 0.125), add = TRUE, lty = 2)
text(c(.2, .8, .2, .8), c(.2, .2, .8, .8), c(1,2,4,8), col = 'red')
```

## Spatially *Intensive* vs. Spatially *Extensive* {.smaller .crunch-title .title-12}

* **Extensive** attributes: associated with a physical size (length, area, volume, counts of items). Ex: **population count**.
  * Associated with an area $\implies$ if that area is cut into smaller areas, the population count needs to be split too
  * (At minimum, the **sum** of the population counts for the smaller areas needs to equal the total for the larger area)
* **Intensive** attributes: **Not** proportional to support: if the area is split, values may vary but on average remain the same. Ex: **population density**
  * If an area is split into smaller areas, population density is not split similarly!
  * The **sum** of population densities for the smaller areas is a meaningless measure
  * Instead, the **mean** will be more useful as ~similar to the density of the total

## Handling the Extensive Case {.smaller .crunch-title}

* Assume the **extensive** attribute $Y$ is **uniformly distributed** over a space $S_i$ (e.g., for **population counts** we assume everyone is evenly-spaced across the region)
* We first compute $Y_{ij}$, derived from $Y_i$ for a sub-area of $S_i$, $A_{ij} = S_i \cap T_j$:

  $$
  \hat{Y}_{ij}(A_{ij}) = \frac{|A_{ij}|}{|S_i|}Y_i(S_i)
  $$

  where $|\cdot|$ denotes area.

* Then we can compute $Y_j(T_j)$ by summing all the elements over area $T_j$:

$$
\hat{Y}_j(T_j) = \sum_{i=1}^{p}\frac{|A_{ij}|}{|S_i|}Y_i(S_i)
$$

## Handling the *Intensive* Case {.smaller .crunch-title}

* Assume the variable $Y$ has **constant value** over a space $S_i$ (e.g., **population density** in assumed to be the same across all sub-areas)
* Then the estimate for a sub-area is the **same** as the estimate for the total area:

$$
\hat{Y}_{ij} = Y_i(S_i)
$$

* So that we can obtain estimates of $Y$ for new spatial units $T_j$ via **area-weighted average** of the source values:

$$
\hat{Y}_j(T_j) = \sum_{i=1}^{p}\frac{|A_{ij}|}{|T_j|}Y_j(S_i)
$$

## References

::: {#refs}
:::
