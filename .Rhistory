#| echo: true
#| warning: false
#| code-fold: true
#| fig-align: center
library(sf)
library(tidyverse)
# Load DC tracts data
dc_sf_fpath <- "data/DC_Census_2020/Census_Tracts_in_2020.shp"
dc_sf <- st_read(dc_sf_fpath, quiet = TRUE)
cols_to_keep <- c("OBJECTID", "TRACT", "GEOID", "ALAND", "AWATER", "STUSAB", "SUMLEV", "GEOCODE", "STATE", "NAME", "POP100", "HU100", "geometry")
dc_sf <- dc_sf |> select(cols_to_keep)
# We can extract the geometry with the st_geometry function
dc_geo <- st_geometry(dc_sf)
# And plot the geometry with base R's plot() function
plot(dc_geo, mar = c(0,0,0,0))
#| label: dc-map-ggplot
#| fig-align: center
ggplot2::theme_set(ggplot2::theme_classic())
dc_sf |>
ggplot() +
geom_sf()
#| fig-align: center
dc_union_sf <- sf::st_union(dc_sf)
dc_union_sf |>
ggplot() +
geom_sf()
#| label: rasterized-dc
#| fig-align: center
library(terra)
dc_SpatVector <- terra::vect(dc_union_sf)
rast_template <- rast(ext(dc_SpatVector),
resolution = 1000, # meters
crs = crs(dc_SpatVector)
)
dc_SpatRaster <- terra::rasterize(dc_SpatVector, rast_template)
dim(dc_SpatRaster)
nlyr(dc_SpatRaster)
plot(dc_SpatRaster)
#| label: rasterized-dc-tidy
#| fig-align: center
library(tidyterra)
ggplot(data=dc_SpatRaster, aes(fill=I("white"))) +
geom_spatraster(data=dc_SpatRaster)
View(dc_SpatRaster)
dc_SpatRaster$layer
dc_SpatRaster$vals <- 1
dc_SpatRaster$vals <- 15
#| label: rasterized-dc-tidy
#| fig-align: center
library(tidyterra)
ggplot(data=dc_SpatRaster, aes(fill=I("white"))) +
geom_spatraster(data=dc_SpatRaster)
#| label: rasterized-dc-tidy
#| fig-align: center
library(tidyterra)
ggplot(data=dc_SpatRaster, aes(fill=vals)) +
geom_spatraster(data=dc_SpatRaster)
#| label: rasterized-dc-tidy
#| fig-align: center
library(tidyterra)
ggplot(data=dc_SpatRaster, aes(fill=layer)) +
geom_spatraster(data=dc_SpatRaster)
#| echo: true
#| warning: false
#| code-fold: true
#| fig-align: center
library(sf)
library(tidyverse)
# Load DC tracts data
dc_sf_fpath <- "data/DC_Census_2020/Census_Tracts_in_2020.shp"
dc_sf <- st_read(dc_sf_fpath, quiet = TRUE)
cols_to_keep <- c("OBJECTID", "TRACT", "GEOID", "ALAND", "AWATER", "STUSAB", "SUMLEV", "GEOCODE", "STATE", "NAME", "POP100", "HU100", "geometry")
dc_sf <- dc_sf |> select(cols_to_keep)
# We can extract the geometry with the st_geometry function
dc_geo <- st_geometry(dc_sf)
# And plot the geometry with base R's plot() function
plot(dc_geo, mar = c(0,0,0,0))
#| label: dc-map-ggplot
#| fig-align: center
ggplot2::theme_set(ggplot2::theme_classic())
dc_sf |>
ggplot() +
geom_sf()
#| fig-align: center
dc_union_sf <- sf::st_union(dc_sf)
dc_union_sf |>
ggplot() +
geom_sf()
#| label: rasterized-dc
#| fig-align: center
library(terra)
dc_SpatVector <- terra::vect(dc_union_sf)
rast_template <- rast(ext(dc_SpatVector),
resolution = 1000, # meters
crs = crs(dc_SpatVector)
)
dc_SpatRaster <- terra::rasterize(dc_SpatVector, rast_template)
dim(dc_SpatRaster)
nlyr(dc_SpatRaster)
plot(dc_SpatRaster)
#| label: rasterized-dc-tidy
#| fig-align: center
library(tidyterra)
ggplot(data=dc_SpatRaster, aes(fill=layer)) +
geom_spatraster(data=dc_SpatRaster)
