---
title: "Week 3: {{< var weeks.3.title >}}"
subtitle: "{{< var course.slides-subtitle >}}"
author: "{{< var course.author >}}"
institute: "{{< var course.institute >}}"
date: "September 11, 2024"
date-format: full
lecnum: 3
categories:
  - "Class Sessions"
bibliography: "../_PPOL6805.bib"
# Shared across formats:
echo: true
code-fold: show
css: "../dsan-globals/jjstyles.css"
html-math-method: mathjax
cache: true
# Format-specific settings:
format:
  revealjs:
    output-file: "slides.html"
    df-print: kable
    slide-number: true
    scrollable: true
    link-external-icon: true
    link-external-newwindow: true
    footer: "{{< var weeks.3.footer >}}"
    include-in-header:
      text: "<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><link rel='stylesheet' type='text/css' href='https://cdn.jsdelivr.net/gh/dreampulse/computer-modern-web-font@master/fonts.css'><link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous'><script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js' integrity='sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz' crossorigin='anonymous'></script>"
    theme: [default, "../dsan-globals/jjquarto.scss"]
    revealjs-plugins:
      - simplemenu
    simplemenu:
      flat: true
      barhtml:
        header: "<div class='menubar'><span style='position: absolute; left: 8; padding-left: 8px;'><a href='./index.html'>&larr; Return to Notes</a></span><ul class='menu'></ul></div>"
      scale: 0.5
  html:
    output-file: "index.html"
    html-math-method: mathjax
    df-print: kable
---

::: {.content-visible unless-format="revealjs"}

<center class='mb-3'>
<a class="h2" href="./slides.html" target="_blank">Open slides in new tab &rarr;</a>
</center>

:::

# Logistical Table-Setting {.title-09}

* [Super quick] Syllabus dates, new Wednesday office hours [https://jjacobs.me/meet](https://jjacobs.me/meet)
* TA Intros!
* Coding Workshops!
* HW1!

::: {.hidden}

```{r}
#| label: r-source-globals
source("../dsan-globals/_globals.r")
final_render <- FALSE
```

:::

## TA Intros {.crunch-title .smaller}

*(In alphabetical order by surname wohoo)*

:::: {.columns}
::: {.column width="50%"}

<center>

**Christy Hsu**<br>`th1010@georgetown.edu`

</center>

* Coding workshop leader
* Survived the fire and flames of **this class** in first semester after studying **history** ü§Ø

:::
::: {.column width="50%"}

<center>

**Yumi Li**<br>`xl794@georgetown.edu`

</center>

* Ombuds-person
* Survived several Jeff classes + background in **computer science** (including Java!)

:::
::::

:::: {.columns}
::: {.column width="50%"}

![](images/ntu.jpg){fig-align="center"}

:::
::: {.column width="50%"}

![](images/newcastle_university.jpg){fig-align="center"}

:::
::::

::: {.callout-note appearance="minimal"}

Relevant Word of the Day: **Â±±** (*ShƒÅn*) = **Mountain**

:::

## Coding Workshops Starting This Friday!

* **Car Barn [Room 230](https://gradadmin.georgetown.edu/reserving-meeting-space-in-the-car-barn/car-barn-230-grad-school-conf-room)** (conference room across hallway from DSAN Suite 207), if you can make it **in person**!
* [Zoom Link](https://georgetown.zoom.us/j/91709606336?pwd=C7Xq1MWIBE2oaQzSO7tNjQRiPoDcgD.1) if you can join **remotely**!
* Video recording to be posted on **Panopto** (link TBD) once processed

## HW1: Fun with Vectors and Rasters

* Question 1 [**Multiple Choice!**]: Understanding the **WKT geometries** conceptually
* Question 2: **Using** the WKT geometries to create **Vectortown**
* Question 3: **Using** the raster format (today's lecture) to create **Gridtopia**

# How to *Do Things* with Geometries {data-stack-name="Overview"}

![From the [`sf` Cheatsheet](https://rstudio.github.io/cheatsheets/sf.pdf){target='_blank'}](images/sf_full.svg){fig-align="center"}

## HW1 $\rightarrow$ HW2 {.crunch-title .crunch-ul .inline-90 .crunch-li-8}

* Once you finish HW1, you'll know how to **create** geometries with `sf` and `terra`
* So now, what can you **do** with them?
* For example, we'd like to be able to say things like:
    * *"The new lamppost cannot be placed at $(x, y)$, since there is already a building there!"*
    * *"There are $N_1$ lampposts in County 1, and $N_2$ lampposts in County 2"*
    * *"The average resident in Neighborhood A lives 2 km away from their nearest bus stop*

## First Things First: Loading and Saving

* Note how there were **no data files** in HW1 üò±
* From HW2 onwards (and in your GIS life), we'll:
  * Download from e.g. city Open Data Portals: geo data **files**, but also loading **on-the-fly** (this week)
  * Summarize/aggregate (this week and next week)
  * **Visualize** findings ("Mapping Libraries" unit)

# Vector Formats {data-stack-name="Data Formats"}

## Shapefiles (`.shp` et al.)

A shape*"file"* is actually **(at least) three separate files** bundled together:

* <span class="badge rounded-pill text-bg-secondary"><i class='bi bi-exclamation-circle pe-1'></i> Mandatory</span> `.shp`: Containing feature geometries
* <span class="badge rounded-pill text-bg-secondary"><i class='bi bi-exclamation-circle pe-1'></i> Mandatory</span> `.shx`: Positional indices
* <span class="badge rounded-pill text-bg-secondary"><i class='bi bi-exclamation-circle pe-1'></i> Mandatory</span> `.dbf`: Data attributes
* <span class="badge rounded-pill text-bg-light"><i class='bi bi-question-circle pe-1'></i> Optional</span> `.prj`: Coordinate reference system
* <span class="badge rounded-pill text-bg-light"><i class='bi bi-question-circle pe-1'></i> Optional</span> `.xml`: Metadata

## Shapefiles {.crunch-title .smaller}

Let's see what's inside the shapefile we first saw in Week 1, containing data on DC's **Census Tracts**: [Census Tracts in 2020](https://opendata.dc.gov/datasets/DCGIS::census-tracts-in-2020/explore){target='_blank'} 

![DC Census Tracts (with the Georgetown campus tract highlighted!) from [OpenData.DC.gov](https://opendata.dc.gov/datasets/DCGIS::census-tracts-in-2020/explore){target='_blank'}](images/open_data_dc.jpg){fig-align="center"}

## Shapefile Anatomy

![From @rodrigue_geography_2016](images/esri_shapefile_model.webp){fig-align="center"}

## GeoJSON / TopoJSON (`.geojson`)

:::: {.columns}
::: {.column width="50%"}

* **J**ava**S**cript **O**bject **N**otation: General cross-platform format
* Useful when data is too complex for e.g. `.csv`
* [TopoJSON](https://github.com/topojson/topojson){target='_blank'} = Memory-efficient GeoJSON
* Bonus: [Inline preview](https://gist.github.com/jpowerj/880fb251add1c7d414bd758c77038c35){target='_blank'} on GitHub!

:::
::: {.column width="50%"}

``` {.json filename="my_data.geojson"}
{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [30, 20], [45, 40],
            [10, 40], [30, 20]
          ]
        ]
      },
      "properties": {
        "color": "green",
        "area": 3565747
      }
    },
    {
      "type": "Feature",
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [15, 5], [40, 10],
            [10, 20], [5, 10], 
            [15, 5]
          ]
        ]
      },
      "properties": {
        "color": "red",
        "area": 3272386
      }
    }
  ]
}
```

:::
::::

## GeoPackage (`.gpkg`)

* Open-source (non-proprietary) [data format standard](https://www.geopackage.org/){target='_blank'}

## Raster Formats

* **GeoTIFF (`.tif` or `.tiff`)**
  * Based on TIFF format developed at NASA
* **NetCDF (`.nc4`)**
  * Used in **earth sciences**, as format for data sources measured and distributed multiple times per day over large full-country or full-continent areas.

## Coordinate Reference Systems (CRS) {.crunch-title .text-80}

* **EPSG** (European Petroleum Survey Group) Registry: Most common way to specify a CRS
  * For example, **4326** is the EPSG code for the WGS84 coordinate system
* **PROJ**: Rather than opaque numeric code like EPSG, uses **plaintext** "proj-strings" containing parameter info: datum, ellipsoid, projection, and units (e.g. meters). Example: `PROJ4` code `EPSG:4326` is represented as

  ```
  +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs
  ```

* **WKT**: [Lengthy but human-readable descriptions](https://en.wikipedia.org/wiki/Well-known_text_representation_of_coordinate_reference_systems){target='_blank'}

# Geospatial Operations 1: Unary Operations {data-stack-name="Unary Operations"}

## Getting the Geometries {.smaller .crunch-title .fix-mapview}

Using [`rnaturalearth`](http://ropensci.github.io/rnaturalearth/){target='_blank'} with [`mapview`](https://r-spatial.github.io/mapview/){target='_blank'}

```{r}
#| label: france-mapview
set.seed(6805)
library(tidyverse)
library(sf)
library(rnaturalearth)
library(mapview)
france_sf <- ne_countries(country = "France", scale = 50)
(france_map <- mapview(france_sf, label = "geounit", legend = FALSE))
```

## Centroid of France

```{r}
#| label: france-centroid
france_cent_sf <- sf::st_centroid(france_sf)
france_map + mapview(france_cent_sf, label = "Centroid", legend = FALSE)
```

## One We Already Saw: Union {.smaller .crunch-title .leaflet-375}

Computing the **union** of all geometries in the `sf` via `sf::st_union()`

```{r}
#| label: africa-union
library(leaflet.extras2)
africa_sf <- ne_countries(continent = "Africa", scale = 50)
africa_union_sf <- sf::st_union(africa_sf)
africa_map <- mapview(africa_sf, label="geounit", legend=FALSE)
africa_union_map <- mapview(africa_union_sf, label="st_union(africa)", legend=FALSE)
africa_map | africa_union_map
```

## Helpful for Rasterizing: BBox

```{r}
#| label: africa-bbox
africa_bbox_sf <- sf::st_bbox(africa_sf)
africa_bbox_map <- mapview(africa_bbox_sf, label="st_bbox(africa)", legend=FALSE)
africa_map | africa_bbox_map
```

## Convex Hulls by Country

```{r}
#| label: africa-countries-convex-hull
africa_countries_cvx <- sf::st_convex_hull(africa_sf)
africa_countries_cvx_map <- mapview(africa_countries_cvx, label="geounit", legend=FALSE)
africa_map | africa_countries_cvx_map
```

## Convex Hull of Continent {.smaller .crunch-title .leaflet-375}

Use `st_union()` first:

```{r}
#| label: africa-convex_hull
africa_cvx <- africa_sf |> st_union() |> st_convex_hull()
africa_cvx_map <- mapview(africa_cvx, label="geounit", legend=FALSE)
africa_map | africa_cvx_map
```

## One We Already Saw: Centroids {.smaller .crunch-title .leaflet-375}

Computing the **centroid** of all geometries in the `sf` via `sf::st_centroid()`

```{r}
#| label: africa-centroids
africa_cents_sf <- sf::st_centroid(africa_sf)
africa_cents_map <- mapview(africa_cents_sf, label="geounit", legend=FALSE)
africa_map | africa_cents_map
```

# Geospatial Operations 2: Binary Operations {data-stack-name="Binary Operations"}

## Spatial Joins {.smaller .crunch-title .crunch-img}

```{r}
#| label: spatial-join
#| output-location: column
#| fig-height: 6
nc <- system.file("shape/nc.shp", package="sf") |>
  read_sf() |>
  st_transform('EPSG:2264')
gr <- st_sf(
         label = apply(expand.grid(1:10, LETTERS[10:1])[,2:1], 1, paste0, collapse = ""),
         geom = st_make_grid(nc))
gr$col <- sf.colors(10, categorical = TRUE, alpha = .3)
# cut, to verify that NA's work out:
gr <- gr[-(1:30),]
suppressWarnings(nc_j <- st_join(nc, gr, largest = TRUE))
par(mfrow = c(2,1), mar = rep(0,4))
plot(st_geometry(nc_j), border = 'grey')
plot(st_geometry(gr), add = TRUE, col = gr$col)
text(st_coordinates(st_centroid(st_geometry(gr))), labels = gr$label, cex = .85)
# the joined dataset:
plot(st_geometry(nc_j), border = 'grey', col = nc_j$col)
text(st_coordinates(st_centroid(st_geometry(nc_j))), labels = nc_j$label, cex = .7)
plot(st_geometry(gr), border = '#88ff88aa', add = TRUE)
```

## Spatial Sampling {.smaller .leaflet-375}

```{r}
#| label: spatial-sampling
# Sample random points
africa_points_list <- sf::st_sample(africa_union_sf, 10)
africa_points_sf <- sf::st_sf(africa_points_list)
africa_points_map <- mapview(africa_points_sf, label="Random Point", col.regions=cb_palette[1], legend=FALSE)
africa_map + africa_points_map
```

## The "Default" Predicate: `st_intersects` {.smaller .title-10}

```{r}
#| label: st-intersects-default
countries_w_points <- africa_sf[africa_points_sf,]
mapview(countries_w_points, label="geounit", legend=FALSE) + africa_points_map
```

## Counting with `lengths()` {.smaller .crunch-title}

```{r}
#| label: count-points
country_inter <- sf::st_intersects(africa_sf, africa_points_sf)
# Computes point counts for each polygon
(num_intersections <- lengths(country_inter))
africa_sf <- africa_sf |> mutate(
  num_points = num_intersections
) |> arrange(geounit)
africa_sf |> select(geounit, num_points) |> head()
```

## Plotting with `mapview`

```{r}
#| label: points-choro-mapview
mapview(africa_sf, zcol="num_points")
```

## Plotting with `ggplot2` {.smaller .crunch-title}

Since we're starting to get into **data** attributes rather than **geometric** features, switching to `ggplot2` is recommended!

```{r}
#| label: points-choro-ggplot
africa_sf |> ggplot(aes(fill=num_points)) +
  geom_sf() +
  theme_classic()
```

## Getting Fancier...

* To do fancier geospatial operations, we'll need to start **overthinking** the different possible **relationships** between two or more geometries!
* To this end: **predicates**

![](images/relations.png){fig-align="center"}

## DE-9IM Strings {.smaller}

```{r}
#| label: de-9im-strings
#| echo: true
#| code-fold: true
library(sf)
polygon <- po <- st_polygon(list(rbind(c(0,0), c(1,0), c(1,1), c(0,1), c(0,0))))
p0 <- st_polygon(list(rbind(c(-1,-1), c(2,-1), c(2,2), c(-1,2), c(-1,-1))))
line <- li <- st_linestring(rbind(c(.5, -.5), c(.5, 0.5)))
s <- st_sfc(po, li)

par(mfrow = c(3,3))
par(mar = c(1,1,1,1))

# "1020F1102"
# 1: 1
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("I(pol)",intersect(),"I(line) = 1")))
lines(rbind(c(.5,0), c(.5,.495)), col = 'red', lwd = 2)
points(0.5, 0.5, pch = 1)

# 2: 0
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("I(pol)",intersect(),"B(line) = 0")))
points(0.5, 0.5, col = 'red', pch = 16)

# 3: 2
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("I(pol)",intersect(),"E(line) = 2")))
plot(po, col = '#ff8888', add = TRUE)
plot(s, col = c(NA, 'darkgreen'), border = 'blue', add = TRUE)

# 4: 0
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("B(pol)",intersect(),"I(line) = 0")))
points(.5, 0, col = 'red', pch = 16)

# 5: F
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("B(pol)",intersect(),"B(line) = F")))

# 6: 1
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("B(pol)",intersect(),"E(line) = 1")))
plot(po, border = 'red', col = NA, add = TRUE, lwd = 2)

# 7: 1
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("E(pol)",intersect(),"I(line) = 1")))
lines(rbind(c(.5, -.5), c(.5, 0)), col = 'red', lwd = 2)

# 8: 0
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("E(pol)",intersect(),"B(line) = 0")))
points(.5, -.5, col = 'red', pch = 16)

# 9: 2
plot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste("E(pol)",intersect(),"E(line) = 2")))
plot(p0 / po, col = '#ff8888', add = TRUE)
plot(s, col = c(NA, 'darkgreen'), border = 'blue', add = TRUE)
```

* The predicate `equals` corresponds to the DE-9IM string `"T*F**FFF*"`. If any two geometries obey this relationship, they are (topologically) equal!

## References

::: {#refs}
:::
